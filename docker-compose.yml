
services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - scraper_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    
  # scraper service
  scraper:
    build: ./scraper
    container_name: scraper
    depends_on:
      - postgres
    environment:
      - DB_HOST=postgres
      - DB_NAME=jobdata
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
    networks:
      - scraper_network



  # Airflow services
  airflow_webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: custom-airflow:latest
    container_name: airflow-webserver
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow_scheduler:
        condition: service_started
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY:-9nZunqm9OqSCq5uG4xGvTeeYJL9XBVuG_pKjbp-zwmM=}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - DB_HOST=postgres
      - DB_NAME=jobdata
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./scraper:/opt/airflow/scraper
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8880:8080"
    command: webserver
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - scraper_network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
    
  airflow_scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: custom-airflow:latest
    container_name: airflow-scheduler
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres/airflow
      - AIRFLOW__CORE__FERNET_KEY=${FERNET_KEY:-9nZunqm9OqSCq5uG4xGvTeeYJL9XBVuG_pKjbp-zwmM=}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__DAGS_FOLDER=/opt/airflow/dags
      - DB_HOST=postgres
      - DB_NAME=jobdata
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./scraper:/opt/airflow/scraper
      - /var/run/docker.sock:/var/run/docker.sock
    command: scheduler
    networks:
      - scraper_network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  airflow_init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    image: custom-airflow:latest
    container_name: airflow-init
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    command: >
      bash -c "
      airflow db init &&
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com
      "
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - scraper_network

volumes:
  pgdata:
  
networks:
  scraper_network:
    driver: bridge